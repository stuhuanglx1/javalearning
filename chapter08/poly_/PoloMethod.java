package chapter08.poly_;

public class PoloMethod {
    //多态：方法或对象具有多种形态，建立在封装和继承基础上。--面向对象的第三大特征
    /*
    具体表现：①方法的多态（重写和重载）②对象的多态
    对象的多态：
    1、一个对象的编译类型和运行类型可以不一致
    Animal animal = new Dog();  【编译类型是Animal，运行类型是Dog】
    animal = new Cat();  【animal的运行类型变成Cat，但编译类型仍然是Animal】
    2、编译类型在定义对象时就确定了，不能改变
    3、运行类型是可以改变的
    4、编译类型  看定义是等号左边 ， 运行类型 看=的右边

    多态的细节：
    多态的前提是两个对象（类）存在继承关系
    多态的向上转型--父类的引用指向子类对象   Object obj = new Cat();可以运行，顶级父类（爷爷类也可）
    1）本质：父类调用了子类的对象
    2）语法：父类类型 对象名 = new 子类类型();
    3）特点：编译类型看左边，运行类型看右边；
    在访问权限允许的情况下，可以调用父类的所有成员；
    不能调用子类中的特有成员（编译阶段能调用哪些成员由编译类型决定）；
    最终运行效果看子类的具体实现（调用方法时，按照从子类开始查找方法调用，查找规则详见super学习的查找规则）！
    多态的向下转型--
    1）语法：子类类型 引用名 = （子类类型）父类引用;
    2）只能强转父类的引用，不能强转父类的对象
    3）要求父类的引用必须指向当前目标类型的对象
    4）向下转型后，可以调用子类类型中的所有成员

    注意事项： --detail02
    属性没有重写，属性值只看编译类型
    instanceOf比较操作符，用于判断对象运行类型是否为xx类型或者xx类型的子类

    java的动态绑定机制--重要特性
    1、当调用对象方法时，该方法会和该对象的内存地址/运行类型进行绑定
    2、当调用属性时，没有动态绑定机制，哪里声明就哪里使用

    多态的应用：
    ①多态数组:数组的定义类型为父类类型，里面保存的实际元素类型是子类类型
    ②多态参数：方法定义的形参类型是父类类型，之际类型允许为子类类型

     */
}
