package chapter10.abstract_;

public class Abstract01 {
    //抽象类
    /*
    当父类的某些方法，需要声明，但又不能确定如何实现时，可以将其声明为抽象方法，那么整个类就是抽象类
    父类方法无确定性 ==> 将该方法设计为抽象（abstract）方法
    当一个类中有抽象方法，这个类将被声明为抽象类
    具体介绍：
    1）用abstract关键字修饰一个类时，这个类就叫做抽象类
    2）用abstract关键字修饰一个方法时，这个类就叫做抽象方法 注意：没有方法体
    3）抽象类的价值在于设计（框架和设计模式使用较多）  作用：一般来说，抽象类会被继承，由其子类继承
    细节：
    1、抽象类不能被实例化
    2、抽象类不一定包含抽象方法
    3、一旦类中包含抽象方法，则该类必须声明为抽象类
    4、abstract只修饰类和方法
    5、抽象类可以有任意成员（抽象类还是类），比如：非抽象方法、构造器等
    6、抽象类不能有主体，即不能实现
    7、如果一个类继承了抽象类，则他必须实现抽象类的所有抽象方法，除非他也声明为abstract
    8、抽象方法不能用private、final和static来修饰，和重写相违背
    最佳实践--模板类实现
    抽象类能强制子类去重写，避免父类方法的浪费--提升代码运行效率和代码可读性
     */
}
