package chapter10.static_;

public class StaticDetail {
    //类变量
    /*
        count变量十分独立，不同于类和对象 ==> 类变量（静态变量） 所有对象共享的变量
        静态变量内存分析：
        ①静态变量被同一个类的所有对象共享
        ②不论在堆中还是在方法区（看jdk版本）中都不影响静态使用
        ③静态变量在类加载时就生成
        类变量是该类的所有对象共享的变量，任何一个该类的对象区访问他时，都能取得相同的值，
        同理何一个该类的对象区修改他时，修改的同一个变量。
        定义语法：
        访问修饰符 static 数据类型 变量名;【推荐】
        static 访问修饰符 数据类型 变量名;
        如何访问：方法①类名.类变量名【推荐】  方法②对象名.类变量名
     */
    //类变量的注意事项和细节
    /*
    1、什么时候使用类变量？
    当我们需要让某个类的对象都共享一个变量时，可以考虑类变量（如，做类统计）
    2、类变量与实例变量的区别
    类变量是所有对象共享的，而实例变量是每个对象独享的
    3、有static是静态变量（类变量），不加则是实例变量（普通变量、非静态属性等）
    4、类变量可以通过  方法①类名.类变量名【推荐】  方法②对象名.类变量名  去访问（满足访问权限和范围）
    5、实例变量不能通过 类名.变量名 来访问
    6、类变量在类加载后就创建了，没有创建对象实例时，也可以通过类名.类变量名访问
    7、类变量的访问周期是随着类加载开始的，随着类消亡而结束
     */
    //类方法
    /*
    类方法语法：
    ①访问修饰符 static 数据返回类型 方法名（）{}【推荐】
    ②static 访问修饰符 数据返回类型 方法名（）{}
    调用：类名.类方法名  或者对象名.类方法名 （注意访问权限和范围）

    类方法的经典使用场景：当方法中不涉及任何和对象相关的成员是，则可以设计成静态方法，提高开发效率
    将通用方法设计成静态方法
    Math类、Utils类  实现不创建实例，也可以调用某个方法（当初工具使用）
    类方法的注意事项：
    1、类方法和普通方法都是随着类加载而加载，将信息储存在方法区：类方法中无this参数
    2、类方法可以通过类名调用，也可以通过对象名调用（访问权限）
    3、普通方法和对象有关，需要通过对象名调用，不能通过类名调用
    4、类方法中不能使用与对象有关的关键字（this、super等）
    5、类方法只能访问静态变量和静态方法
    6、普通成员方法即可以访问普通（非静态）变量和方法，也可以访问静态成员
       --因为静态成员在类加载时就加载，而非静态成员需要创建对象
     */

}
class D{
    public static int num = 10;

    public static void hi(){}
    public void say(){}

    public static void showNum(){
        //两种写法都可以
        System.out.println(num);
        System.out.println(D.num);
//        System.out.println(this.num);//报错
        hi();//可以调用
//        say();//报错

    }
}